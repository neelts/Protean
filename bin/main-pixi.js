// Generated by Haxe 3.4.7
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var display_PDisplayObject = function() { };
display_PDisplayObject.__name__ = true;
display_PDisplayObject.prototype = {
	__class__: display_PDisplayObject
};
var display_PContainer = function() {
	PIXI.Container.call(this);
};
display_PContainer.__name__ = true;
display_PContainer.__interfaces__ = [display_PDisplayObject];
display_PContainer.__super__ = PIXI.Container;
display_PContainer.prototype = $extend(PIXI.Container.prototype,{
	__class__: display_PContainer
});
var PApplication = function(settings) {
	display_PContainer.call(this);
	this.app = new PTApplication();
	this.app.backgroundColor = settings.backgroundColor;
	this.app.start("auto",settings.parentDOM,settings.canvas);
	this.app.stage.addChild(this);
	this.onReady();
};
PApplication.__name__ = true;
PApplication.__super__ = display_PContainer;
PApplication.prototype = $extend(display_PContainer.prototype,{
	onReady: function() {
	}
	,__class__: PApplication
});
var protean_Application = function(options) {
	haxe_Log.trace = Protean.routeTrace;
	PApplication.call(this,options);
};
protean_Application.__name__ = true;
protean_Application.__super__ = PApplication;
protean_Application.prototype = $extend(PApplication.prototype,{
	__class__: protean_Application
});
var Fractals = function() {
	protean_Application.call(this,{ parentDOM : window.document.getElementById(Protean.id), backgroundColor : 0});
};
Fractals.__name__ = true;
Fractals.main = function() {
	new Fractals();
};
Fractals.__super__ = protean_Application;
Fractals.prototype = $extend(protean_Application.prototype,{
	onReady: function() {
		haxe_Log.trace("!!!",{ fileName : "Fractals.hx", lineNumber : 29, className : "Fractals", methodName : "onReady"});
		this.current = this;
		window.document.addEventListener("click",$bind(this,this.onClick));
		window.document.addEventListener("keyup",$bind(this,this.onKeyUp));
	}
	,onKeyUp: function(e) {
		if(e.keyCode == 13) {
			this.build();
		}
	}
	,build: function() {
		var cs = [];
		var _g1 = 0;
		var _g = this.current.children.length;
		while(_g1 < _g) {
			var cc = this.current.getChildAt(_g1++);
			if(js_Boot.__instanceof(cc,display_PContainer)) {
				cs.push(cc);
			}
		}
		haxe_Log.trace(cs,{ fileName : "Fractals.hx", lineNumber : 45, className : "Fractals", methodName : "build"});
		var qe = [];
		qe = cs.slice();
		while(qe.length > 0) {
			var c = qe.pop();
			var _g2 = 0;
			while(_g2 < cs.length) {
				var s = cs[_g2];
				++_g2;
				if(Fractals.I-- > 0) {
					var object = this.getFigure();
					object.position.set(s.x,s.y);
					var scale = s.scale.x == s.scale.y ? s.scale.x : 0;
					object.scale.set(scale,scale);
					object.rotation = s.rotation;
					c.addChild(object);
					qe.unshift(object);
				}
			}
		}
	}
	,onClick: function(e) {
		var object = this.getFigure();
		this.current.addChild(object);
		if(this.current == this) {
			object.position.set(e.clientX,e.clientY);
			this.current = object;
		} else {
			object.position.set(e.clientX - this.current.x,e.clientY - this.current.y);
			object.scale.set(0.7,0.7);
		}
	}
	,getFigure: function() {
		return new Figure();
	}
	,__class__: Fractals
});
var Figure = function() {
	display_PContainer.call(this);
	var s = new display_PShape();
	s.lineStyle(10,16711680,1);
	s.beginFill(0,1);
	s.drawRect(-200,-200,400,400);
	var scale = Math.random() * .3 + .3;
	s.scale.set(scale,scale);
	this.addChild(s);
	this.rotation = Math.PI * Math.random();
	new haxe_Timer(100).run = $bind(this,this.update);
};
Figure.__name__ = true;
Figure.__super__ = display_PContainer;
Figure.prototype = $extend(display_PContainer.prototype,{
	update: function() {
		this.rotation += .05;
	}
	,__class__: Figure
});
Math.__name__ = true;
var pixi_plugins_app_Application = function() {
	this._animationFrameId = null;
	this.pixelRatio = 1;
	this.autoResize = true;
	this.transparent = false;
	this.antialias = false;
	this.forceFXAA = false;
	this.roundPixels = false;
	this.legacy = false;
	this.clearBeforeRender = true;
	this.preserveDrawingBuffer = false;
	this.backgroundColor = 16777215;
	this.width = window.innerWidth;
	this.height = window.innerHeight;
	this.position = "static";
};
pixi_plugins_app_Application.__name__ = true;
pixi_plugins_app_Application.prototype = {
	start: function(rendererType,parentDom,canvasElement) {
		if(rendererType == null) {
			rendererType = "auto";
		}
		if(canvasElement == null) {
			this.canvas = window.document.createElement("canvas");
			this.canvas.style.width = this.width + "px";
			this.canvas.style.height = this.height + "px";
			this.canvas.style.position = this.position;
		} else {
			this.canvas = canvasElement;
		}
		if(this.autoResize) {
			window.onresize = $bind(this,this._onWindowResize);
		}
		var renderingOptions = { };
		renderingOptions.width = this.width | 0;
		renderingOptions.height = this.height | 0;
		renderingOptions.view = this.canvas;
		renderingOptions.backgroundColor = this.backgroundColor;
		renderingOptions.resolution = this.pixelRatio;
		renderingOptions.antialias = this.antialias;
		renderingOptions.forceFXAA = this.forceFXAA;
		renderingOptions.autoResize = this.autoResize;
		renderingOptions.transparent = this.transparent;
		renderingOptions.clearBeforeRender = this.clearBeforeRender;
		renderingOptions.preserveDrawingBuffer = this.preserveDrawingBuffer;
		renderingOptions.roundPixels = this.roundPixels;
		renderingOptions.legacy = this.legacy;
		if(rendererType == null) {
			this.app = new PIXI.Application(renderingOptions);
		} else if(rendererType == "canvas") {
			renderingOptions.forceCanvas = true;
			this.app = new PIXI.Application(renderingOptions);
		} else {
			this.app = new PIXI.Application(renderingOptions);
		}
		this.stage = this.app.stage;
		this.renderer = this.app.renderer;
		if(parentDom == null) {
			window.document.body.appendChild(this.app.view);
		} else {
			parentDom.appendChild(this.app.view);
		}
		this.app.ticker.add($bind(this,this._onRequestAnimationFrame));
	}
	,_onWindowResize: function(event) {
		this.width = window.innerWidth;
		this.height = window.innerHeight;
		this.app.renderer.resize(this.width,this.height);
		this.canvas.style.width = this.width + "px";
		this.canvas.style.height = this.height + "px";
		if(this.onResize != null) {
			this.onResize();
		}
	}
	,_onRequestAnimationFrame: function() {
		if(this.onUpdate != null) {
			this.onUpdate(this.app.ticker.deltaTime);
		}
	}
	,__class__: pixi_plugins_app_Application
};
var PTApplication = function() {
	pixi_plugins_app_Application.call(this);
};
PTApplication.__name__ = true;
PTApplication.__super__ = pixi_plugins_app_Application;
PTApplication.prototype = $extend(pixi_plugins_app_Application.prototype,{
	start: function(rendererType,parentDom,canvasElement) {
		if(rendererType == null) {
			rendererType = "auto";
		}
		pixi_plugins_app_Application.prototype.start.call(this,rendererType,parentDom,canvasElement);
		this._onWindowResize(null);
		window.onload = $bind(this,this._onWindowResize);
	}
	,_onWindowResize: function(event) {
		this.width = this.canvas.parentElement.clientWidth;
		this.height = this.canvas.parentElement.clientHeight;
		this.app.renderer.resize(this.width,this.height);
		this.canvas.style.width = this.width + "px";
		this.canvas.style.height = this.height + "px";
		if(this.onResize != null) {
			this.onResize();
		}
	}
	,__class__: PTApplication
});
var Protean = function() { };
Protean.__name__ = true;
Protean.routeTrace = function(v,infos) {
	window.console.log(infos.className + "." + infos.methodName + ":" + infos.lineNumber + ":");
	window.console.log(v);
};
var display_PShape = function() {
	PIXI.Graphics.call(this);
};
display_PShape.__name__ = true;
display_PShape.__interfaces__ = [display_PDisplayObject];
display_PShape.__super__ = PIXI.Graphics;
display_PShape.prototype = $extend(PIXI.Graphics.prototype,{
	lineStyle: function(lineWidth,color,alpha) {
		return PIXI.Graphics.prototype.lineStyle.call(this,lineWidth == null ? 1 : lineWidth,color == null ? 16711680 : color,alpha == null ? 1 : alpha);
	}
	,__class__: display_PShape
});
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	run: function() {
	}
	,__class__: haxe_Timer
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
Fractals.I = 1000;
Protean.id = "pixi";
js_Boot.__toStr = ({ }).toString;
Fractals.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
